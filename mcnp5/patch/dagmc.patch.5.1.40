diff -rN '--unified=0' mcnp_vendor/Source/src/angl.F90 mcnp_dagmc/Source/src/angl.F90
--- mcnp_vendor/Source/src/angl.F90	2016-01-04 16:06:55.000004899 -0600
+++ mcnp_dagmc/Source/src/angl.F90	2016-01-04 21:20:51.835745280 -0600
@@ -11,0 +12 @@
+  use dagmc_mod
@@ -15,0 +17,7 @@
+
+  ! DAGMC: In CAD mode, circumvent entire function and call DAGMC version instead
+  if (isdgmc == 1) then
+     call dagmcangl(jsu,xxx,yyy,zzz,ang)
+     angl=max(-one,min(one,ang(1)*uuu+ang(2)*vvv+ang(3)*www))
+     return
+  endif
diff -rN '--unified=0' mcnp_vendor/Source/src/celsrf.F90 mcnp_dagmc/Source/src/celsrf.F90
--- mcnp_vendor/Source/src/celsrf.F90	2016-01-04 16:06:55.004004899 -0600
+++ mcnp_dagmc/Source/src/celsrf.F90	2016-01-04 21:20:51.839745280 -0600
@@ -12,0 +13 @@
+  use dagmc_mod
@@ -309,0 +311,4 @@
+
+    ! DAGMC: Skip this loop if in DAGMC mode
+    if (isdgmc == 1) exit
+
diff -rN '--unified=0' mcnp_vendor/Source/src/chkcel.F90 mcnp_dagmc/Source/src/chkcel.F90
--- mcnp_vendor/Source/src/chkcel.F90	2016-01-04 16:06:55.000004899 -0600
+++ mcnp_dagmc/Source/src/chkcel.F90	2016-01-04 21:20:51.839745280 -0600
@@ -22,0 +23 @@
+  use dagmc_mod
@@ -26,0 +28,6 @@
+  ! DAGMC: In CAD mode, circumvent this function and call DAGMC version instead
+  if ( isdgmc == 1 .and. (m == 0 .or. m==2) ) then
+     call dagmcchkcel(uuu,vvv,www,xxx,yyy,zzz,i1,j)
+     return
+  endif
+  
diff -rN '--unified=0' mcnp_vendor/Source/src/dagmc_mod.F90 mcnp_dagmc/Source/src/dagmc_mod.F90
--- mcnp_vendor/Source/src/dagmc_mod.F90	1969-12-31 18:00:00.000000000 -0600
+++ mcnp_dagmc/Source/src/dagmc_mod.F90	2016-01-04 21:20:51.839745280 -0600
@@ -0,0 +1,254 @@
+module dagmc_mod
+
+  use mcnp_params
+  use pblcom, only: mpb
+
+  integer, parameter, public :: & ! named constant for file distribution mode
+     & DGFM_SEQ   = 0, &
+     & DGFM_READ  = 1, & 
+     & DGFM_BCAST = 2 
+
+  integer, save :: isdgmc 
+
+  integer, save :: dagmc_geom_file_mode = DGFM_SEQ  ! default to a distributed read
+
+  integer, save :: dagmc_srcmode = 0
+  integer, save :: dagmc_usecad  = 0
+  integer, save :: dagmc_distlimit = 0
+  
+  real(dknd), save :: dagmc_facet_tol
+  real(dknd), save :: dagmc_overlap_thickness
+  real(dknd), save :: dagmc_version
+  
+  integer, save :: dagmc_subversion
+
+  public :: &
+    &   lcadrd, &        ! read log file information
+    &   dagmc_msgput, &  ! share dagmc settings to slave tasks
+    &   dagmc_msgget    ! receive dagmc settings from master task
+
+contains
+
+  subroutine lcadrd
+    ! Description:
+    ! Reads in the CAD log file and "inserts" it at the header
+    ! of the input file.
+    
+    ! >>>>> Modules used
+    use mcnp_global
+    use mcnp_params
+    use mcnp_iofiles
+    
+    ! >>>>> Implict declaration of real variables as doubles
+    implicit real(dknd) (a-h,o-z)
+    
+    ! >>>>> Other variables
+    character(len=80)  :: hk          ! Character for line of file being read
+    integer, parameter :: ie = 70     ! I/O index of a scratch file
+    integer            :: it, iu = 0  ! Indices for nxtsym function
+    integer            :: ios = 0     ! IOSTAT for file reading
+    
+    ! >>>>> Initialize the scratch file and get to beginning of input file
+    open(ie,status='scratch')
+    rewind iui
+    
+    ! >>>>> Check if first line is message block, otherwise assume a title card
+    read(iui,'(a80)',end=1000) hk
+    call nxtsym(hk,' ',1,it,iu,1)
+    
+    if (hk(it:iu) == 'message:') then
+       ! Message block exists, read until blank line found
+       do
+          read(iui,'(a80)',end=1000) hk   ! Read in string: exception for eof
+          if (hk == ' ') exit             ! Terminate loop once blank line found 
+       enddo
+       ! Read in title card, for message block case
+       read(iui,'(a80)',end=1000) hk
+    endif
+    
+    ! Write title card to scratch file
+    write(ie,'(a80)') hk
+    
+    ! >>>>> Read in cell/surface cards from log
+    rewind iulc
+    do
+       read(iulc, '(a80)', iostat=ios) hk
+       
+       ! Check for end of file or errors
+       if (ios == 0) then
+          write(ie,'(a80)') hk     ! Write the line normally
+       elseif (ios < 0) then
+          exit                     ! Break loop at EOF
+       else
+          goto 2000                ! Exception for severe I/O error
+       endif
+    enddo
+    
+    ! >>>> Read in rest of input file
+    ios = 0
+    do
+       read(iui, '(a80)', iostat = ios) hk
+       
+       ! Check for end of file or errors
+       if (ios == 0) then
+          write(ie,'(a80)') hk     ! Write the line to scratch file
+       elseif (ios < 0) then
+          exit                     ! Break loop at EOF
+       else
+          goto 3000                ! Exception for severe I/O error
+       endif
+    enddo
+    
+    ! >>>>> Echo back to new scratch input file
+    close(iui)
+    rewind ie
+    open(iui,status='scratch')
+    ios = 0
+    do      
+       read(ie, '(a80)', iostat = ios) hk
+       
+       ! Check for end of file or errors
+       if (ios == 0) then
+          write(iui,'(a80)') hk    ! Write the line in the scratch input file
+       elseif (ios < 0) then
+          exit                     ! Break loop at EOF
+       else
+          goto 4000                ! Exception for severe I/O error
+       endif
+       
+    enddo
+    
+    ! >>>>> Finish up
+    rewind iui
+    ! pass1 expects iui to be advanced beyond the title card, 
+    ! so read past the first line now
+    read(iui, '(a)')
+
+    close(ie)
+    return
+    
+    ! >>>>> Exceptions
+    ! End of File at header of input file
+1000 call expire(0,'lcadrd','unexpected eof in file '//inp)
+    return
+    ! Severe I/O error during reading of CAD log
+2000 call expire(0,'lcadrd','error during read of file '//lcad)
+    return
+    ! Severe I/O error during reading of CAD log
+3000 call expire(0,'lcadrd','error during read of file '//inp)
+    return
+    ! Severe I/O error during echo of scratch file to new input file
+4000 call expire(0,'lcadrd','error stitching input and CAD log')
+    return
+    
+  end subroutine lcadrd
+
+  subroutine dagmc_msgput
+
+    use messages, only : msg_put
+    use mcnp_iofiles, only: gcad, ftol
+    use fixcom, only : ntal
+    use mcnp_debug
+
+    call msg_put (isdgmc)
+    call msg_put (dagmc_geom_file_mode)
+    call msg_put (gcad)
+    call msg_put (ftol)
+    call msg_put (dagmc_srcmode)
+    call msg_put (dagmc_usecad)
+    call msg_put (dagmc_distlimit)
+    call msg_put (dagmc_overlap_thickness)
+    call msg_put (dagmc_facet_tol)
+    call msg_put (dagmc_version)
+
+  end subroutine dagmc_msgput
+
+  subroutine dagmc_msgget
+   
+    use messages, only : msg_get
+    use mcnp_iofiles, only: gcad, ftol
+    use fixcom, only : ntal
+    use mcnp_debug
+
+    implicit none
+
+    real(dknd) :: master_dagmc_version
+
+    call msg_get (isdgmc)
+    call msg_get (dagmc_geom_file_mode)
+    call msg_get (gcad)
+    call msg_get (ftol)
+    call msg_get (dagmc_srcmode)
+    call msg_get (dagmc_usecad)
+    call msg_get (dagmc_distlimit)
+    call msg_get (dagmc_overlap_thickness)
+    call msg_get (dagmc_facet_tol)
+    call msg_get (master_dagmc_version)
+
+    if ( isdgmc == 1 ) then
+       call dagmcinit(gcad//char(0),len_trim(gcad),      &
+          &           ftol//char(0),len_trim(ftol),      &
+          &           dagmc_geom_file_mode, dagmc_version, dagmc_subversion, mpb )
+       if (dagmc_version /= master_dagmc_version) then
+          ! errprt and fail!
+       end if
+       call dagmc_set_settings(dagmc_distlimit, dagmc_usecad, dagmc_overlap_thickness, dagmc_srcmode )
+    end if
+
+  end subroutine dagmc_msgget
+  
+  subroutine init_dagmc
+
+     use mcnp_iofiles
+
+     ! Check to see if the CAD file exists, if not, abort
+     inquire( file = gcad, exist = file_exists)
+     if (.not.file_exists) then
+        call expire(0,'main','CAD geometry file '//gcad// &
+             &            ' does not exist.')
+     endif
+     
+     ! initialize DAGMC, read geometry and initialize OBBTree
+     call dagmcinit(gcad//char(0),len_trim(gcad),      &
+          &         ftol//char(0),len_trim(ftol),      &
+          &         dagmc_geom_file_mode,dagmc_version, dagmc_subversion, mpb )
+
+
+     call dagmc_init_settings(dagmc_distlimit, dagmc_usecad, &
+                              dagmc_overlap_thickness, dagmc_facet_tol, dagmc_srcmode)
+
+     ! print version number message to terminal
+     call dagmc_version_heading(jtty)
+
+     ! write mesh file if requested
+     if ( len_trim(fcad) .gt. 0) then
+        call dagmcwritefacets(fcad//char(0),len_trim(fcad))     
+     endif
+
+
+     ! parse metadata and write input cards
+     call dagmcwritemcnp(gcad//char(0),lcad//char(0), len_trim(lcad))
+     
+     ! Check to ensure that the log file is written
+     inquire( file = lcad, exist = file_exists)
+     if (.not.file_exists) then
+        call expire(0,'main','CAD list file '//lcad// &
+             &             ' not written by DAGMC.')
+     endif
+     
+     ! Open the cad log file on the MCNP side
+     open( unit=iulc, file=lcad, status='old' )
+
+  end subroutine init_dagmc
+
+  ! write DagMC version number message to given file
+  subroutine dagmc_version_heading(o)
+    
+    integer :: o 
+
+     write(o,150) dagmc_version, dagmc_subversion
+150  format(1x,'This problem is using DAGMC version ',f8.3,' w/ DagMC r', i4)
+
+  end subroutine dagmc_version_heading
+
+end module dagmc_mod
diff -rN '--unified=0' mcnp_vendor/Source/src/dbmin.F90 mcnp_dagmc/Source/src/dbmin.F90
--- mcnp_vendor/Source/src/dbmin.F90	2016-01-04 16:06:55.000004899 -0600
+++ mcnp_dagmc/Source/src/dbmin.F90	2016-01-04 21:20:51.839745280 -0600
@@ -11,0 +12 @@
+  use dagmc_mod
@@ -13,0 +15,11 @@
+
+  ! DAGMC: Explicitly declare variable for return value for inter-language call
+  real(dknd) :: dbmin_retval = zero
+
+  ! DAGMC: In CAD mode, call MOAB version instead
+  if ( isdgmc == 1 ) then
+     call dagmcdbmin(icl,xxx,yyy,zzz,huge_float,dbmin_retval)
+     dbmin = dbmin_retval
+     return
+  endif
+
diff -rN '--unified=0' mcnp_vendor/Source/src/Depends mcnp_dagmc/Source/src/Depends
--- mcnp_vendor/Source/src/Depends	2016-01-04 16:06:55.004004899 -0600
+++ mcnp_dagmc/Source/src/Depends	2016-01-04 16:05:32.780006032 -0600
@@ -21 +21 @@
-angl$(OBJF)   : mcnp_global$(OBJF) mcnp_debug$(OBJF)
+angl$(OBJF)   : mcnp_global$(OBJF) mcnp_debug$(OBJF) $(DAGMC_MOD)
@@ -45 +45 @@
-		erprnt$(OBJF)
+		erprnt$(OBJF) $(DAGMC_MOD)
@@ -53 +53 @@
-chkcel$(OBJF) : mcnp_global$(OBJF) mcnp_debug$(OBJF)
+chkcel$(OBJF) : mcnp_global$(OBJF) mcnp_debug$(OBJF) $(DAGMC_MOD)
@@ -72 +72 @@
-dbmin$(OBJF)  : mcnp_global$(OBJF) mcnp_debug$(OBJF)
+dbmin$(OBJF)  : mcnp_global$(OBJF) mcnp_debug$(OBJF) $(DAGMC_MOD)
@@ -88 +88 @@
-		dxtran_mod$(OBJF)  mcnp_landau$(OBJF)
+		dxtran_mod$(OBJF)  mcnp_landau$(OBJF) $(DAGMC_MOD)
@@ -137 +137 @@
-		rmc_mod$(OBJF) mcnp_debug$(OBJF) dxtran_mod$(OBJF)
+		rmc_mod$(OBJF) mcnp_debug$(OBJF) dxtran_mod$(OBJF) $(DAGMC_MOD)
@@ -139 +139 @@
-		erprnt$(OBJF)
+		erprnt$(OBJF) $(DAGMC_MOD)
@@ -142 +142,2 @@
-		fmesh_mod$(OBJF) rmc_mod$(OBJF) mcnp_debug$(OBJF)
+		fmesh_mod$(OBJF) rmc_mod$(OBJF) mcnp_debug$(OBJF) \
+		$(DAGMC_MOD)
@@ -156 +157 @@
-		fmesh_mod$(OBJF) erprnt$(OBJF)
+		fmesh_mod$(OBJF) erprnt$(OBJF) $(DAGMC_MOD)
@@ -184 +185 @@
-		mcnp_debug$(OBJF)
+		mcnp_debug$(OBJF) $(DAGMC_MOD)
@@ -224 +225 @@
-namchg$(OBJF) : mcnp_global$(OBJF) mcnp_debug$(OBJF)
+namchg$(OBJF) : mcnp_global$(OBJF) mcnp_debug$(OBJF) $(DAGMC_MOD)
@@ -229 +230 @@
-newcel$(OBJF) : mcnp_global$(OBJF) mcnp_debug$(OBJF)
+newcel$(OBJF) : mcnp_global$(OBJF) mcnp_debug$(OBJF) $(DAGMC_MOD)
@@ -233 +234 @@
-		fmesh_mod$(OBJF) mcnp_debug$(OBJF) erprnt$(OBJF)
+		fmesh_mod$(OBJF) mcnp_debug$(OBJF) erprnt$(OBJF) $(DAGMC_MOD)
@@ -244 +245 @@
-		fmesh_mod$(OBJF) mcnp_debug$(OBJF) erprnt$(OBJF)
+		fmesh_mod$(OBJF) mcnp_debug$(OBJF) erprnt$(OBJF) $(DAGMC_MOD)
@@ -248 +249,2 @@
-pass1$(OBJF)  : mcnp_global$(OBJF) dynamic_arrays$(OBJF) mcnp_input$(OBJF) mcnp_debug$(OBJF)
+pass1$(OBJF)  : mcnp_global$(OBJF) dynamic_arrays$(OBJF) mcnp_input$(OBJF) mcnp_debug$(OBJF) \
+	        $(DAGMC_MOD)
@@ -330 +332 @@
-sourcb$(OBJF) : mcnp_global$(OBJF) mcnp_debug$(OBJF)
+sourcb$(OBJF) : mcnp_global$(OBJF) mcnp_debug$(OBJF) $(DAGMC_MOD)
@@ -353 +355 @@
-tally$(OBJF)  : mcnp_global$(OBJF) mcnp_debug$(OBJF)
+tally$(OBJF)  : mcnp_global$(OBJF) mcnp_debug$(OBJF) $(DAGMC_MOD)
@@ -370,2 +372,2 @@
-track$(OBJF)  : mcnp_global$(OBJF) mcnp_debug$(OBJF) qttyin$(OBJF)
-transm$(OBJF) : mcnp_global$(OBJF) mcnp_debug$(OBJF)
+track$(OBJF)  : mcnp_global$(OBJF) mcnp_debug$(OBJF) qttyin$(OBJF) $(DAGMC_MOD)
+transm$(OBJF) : mcnp_global$(OBJF) mcnp_debug$(OBJF) $(DAGMC_MOD)
@@ -389 +391 @@
-		erprnt$(OBJF)
+		erprnt$(OBJF) $(DAGMC_MOD)
@@ -416,0 +419,6 @@
+endif
+#
+# DagMC objects
+ifneq (,$(DAGMC_MOD))
+dagmc_mod$(OBJF) : mcnp_global$(OBJF) messages$(OBJF)
+../dagmc/mcnp_funcs$(OBJC) : ../dagmc/mcnp_funcs.h 
diff -rN '--unified=0' mcnp_vendor/Source/src/electr.F90 mcnp_dagmc/Source/src/electr.F90
--- mcnp_vendor/Source/src/electr.F90	2016-01-04 16:06:55.004004899 -0600
+++ mcnp_dagmc/Source/src/electr.F90	2016-01-04 21:20:51.843745280 -0600
@@ -11,0 +12 @@
+  use dagmc_mod
@@ -82,0 +84,6 @@
+        endif
+
+        ! DAGMC: In DAGMC mode, use the known physics distance to limit geometry search
+        if ( isdgmc == 1 ) then
+           d = min(dtc,pmf)
+           call dagmc_setdis(d)
diff -rN '--unified=0' mcnp_vendor/Source/src/FILE.list mcnp_dagmc/Source/src/FILE.list
--- mcnp_vendor/Source/src/FILE.list	2016-01-04 16:06:54.996004899 -0600
+++ mcnp_dagmc/Source/src/FILE.list	2016-01-04 16:05:32.760006032 -0600
@@ -75 +75,5 @@
-#################################################
+####################
+# C++ Source Files #
+####################
+CXX_SRC :=  
+
@@ -92,0 +97,6 @@
+ifeq (dagmc,$(filter dagmc,$(CONFIG)))
+  F_SRC   := $(F_SRC) dagmc_mod.F90
+  CXX_SRC := $(CXX_SRC) ../../mcnp_funcs.cpp \
+                        ../../meshtal_funcs.cpp 
+endif
+
@@ -98,0 +109 @@
+CXX_SRC :=	$(filter-out $(UNWANTED_CXX_SRC),$(CXX_SRC))
@@ -101,0 +113 @@
+CXX_OBJS =	$(CXX_SRC:.cpp=$(OBJC))
diff -rN '--unified=0' mcnp_vendor/Source/src/fmesh_mod.F90 mcnp_dagmc/Source/src/fmesh_mod.F90
--- mcnp_vendor/Source/src/fmesh_mod.F90	2016-01-04 16:06:55.008004899 -0600
+++ mcnp_dagmc/Source/src/fmesh_mod.F90	2016-01-04 21:20:51.855745280 -0600
@@ -11,0 +12,2 @@
+  use dagmc_mod
+
@@ -18,0 +21,4 @@
+  logical :: enable_dag_tallies           = .false. != DAGMC: Indicate any dagmc tally    
+  logical :: enable_dag_collision_tallies = .false. != DAGMC: Indicate a collision tally   
+  logical :: enable_dag_track_tallies     = .false. != DAGMC: Indicate a track tally   
+
@@ -124,0 +131,27 @@
+  ! DAGMC: These helper functions must be called with non-dereferenced Fortran pointers.
+  ! This interface specification ensures that the calls to these functions       
+  ! (which are implemented in C) are made with the correct types                    
+    interface
+     subroutine dagmc_fmesh_get_tally_data( fm_id, fref )
+       implicit none
+       integer :: fm_id
+       ! The dknd parameter is unavailable in this scope for some reason,
+       ! so I have copied the definition of dknd from mcnp_params                            
+       real(selected_real_kind(15,307)) , dimension(:), pointer :: fref 
+     end subroutine dagmc_fmesh_get_tally_data
+
+     subroutine dagmc_fmesh_get_error_data( fm_id, fref )
+       implicit none
+       integer :: fm_id
+       real(selected_real_kind(15,307)) , dimension(:), pointer :: fref
+     end subroutine dagmc_fmesh_get_error_data
+
+     subroutine dagmc_fmesh_get_scratch_data( fm_id, fref )
+       implicit none
+       integer :: fm_id
+       real(selected_real_kind(15,307)), dimension(:), pointer:: fref 
+     end subroutine dagmc_fmesh_get_scratch_data
+
+    end interface
+
+
@@ -128,0 +162,59 @@
+  ! DAGMC: Helper function - create a valid Fortran pointer from a C array and a length 
+  subroutine dagmc_make_fortran_pointer( fref, carray, size )
+    implicit none
+
+    integer :: size ! The size (in doubles) of the array in C 
+    real(dknd), dimension(size), target :: carray ! The C pointer 
+    real(dknd), dimension(:), pointer :: fref     ! The returned Fortran pointer 
+
+    fref => carray
+
+  end subroutine dagmc_make_fortran_pointer
+
+  subroutine dagmc_setup_mesh_tally( idx )
+    implicit none
+    integer :: idx
+    integer :: dagmc_iscol
+    integer :: fmesh_idx
+
+    print *, shape(fm(idx)%fmarry)
+    ! Determine if DAGMC tally uses a multiplier                      
+    ! Default value of -1 indicates no multipliers are present        
+    fmesh_idx = -1
+    ! Check for energy-dependent multipliers                                     
+    if(fm(idx)%ifm_card/=0 .or. fm(idx)%icx == 1 .or. fm(idx)%intrpol /= 0) then
+      fmesh_idx = idx
+    elseif (fm(idx)%fmult > 0. .and. fm(idx)%fmult /= 1.) then
+      ! Constant multiplier only, not energy-dependent                                        
+      fmesh_idx = idx
+    endif
+
+
+    ! Setup dagmc mesh; parameters will be read in from FC card                               
+    if( fm(idx)%n_comment_lines > 0 ) then
+       call dagmc_fmesh_setup_mesh( fm(idx)%ipt, fm(idx)%id, fmesh_idx, &
+                                    fm(idx)%enbin, fm(idx)%nenb, fm(idx)%tot_energy_bin, &
+                                    fm(idx)%comment, fm(idx)%n_comment_lines, dagmc_iscol )
+    else
+       ! No FC card; avoid passing uninitialized pointer to C                                 
+       ! The following call will halt mcnp with an error because of the missing card.   
+       ! We could also signal an error and halt here instead.                                 
+       call dagmc_fmesh_setup_mesh( fm(idx)%ipt, fm(idx)%id, fmesh_idx, &
+                                    fm(idx)%enbin, fm(idx)%nenb, fm(idx)%tot_energy_bin, &
+                                    0, 0, dagmc_iscol )
+    endif
+
+    if( dagmc_iscol == 1 ) then
+       enable_dag_collision_tallies = .true.
+    else
+       enable_dag_track_tallies = .true.
+    endif
+
+    if ( fm(idx)%icrd==3 .and. enable_dag_tallies .eqv. .false.) then
+       enable_dag_tallies = .true.
+    endif
+
+  end subroutine dagmc_setup_mesh_tally
+
+  !-----------------------------------------------------------------------------------------
+
@@ -135,0 +228 @@
+    real(dknd), dimension(:), pointer :: dagmc_runtpe_data
@@ -179,0 +273,8 @@
+       ! DAGMC:                                                                          
+         if ( fm(i)%icrd==3 ) then
+          ! Get pointer to mesh's working data and fill runtpe with those contents           
+            call dagmc_fmesh_get_tally_data( fm(i)%id, dagmc_runtpe_data )
+            write(iu) dagmc_runtpe_data
+            call dagmc_fmesh_get_error_data( fm(i)%id, dagmc_runtpe_data )
+            write(iu) dagmc_runtpe_data
+         endif
@@ -200,0 +302,5 @@
+    real(dknd), dimension(:), pointer :: dagmc_runtpe_data
+
+    ! DAGMC DEBUGGING  
+    ! print '(a80)', 'DAGMC MESHTAL: fmesh_runtpr' 
+
@@ -346,0 +453,10 @@
+
+      ! DAGMC:                                                                               
+         if ( fm(i)%icrd==3 ) then
+            if( .not. is_assoc ) call dagmc_setup_mesh_tally( i )
+          ! Get pointer to mesh's working memory and fill it with runtpe data                 
+            call dagmc_fmesh_get_tally_data( fm(i)%id, dagmc_runtpe_data )
+            read(iu) dagmc_runtpe_data
+            call dagmc_fmesh_get_error_data( fm(i)%id, dagmc_runtpe_data )
+            read(iu) dagmc_runtpe_data
+         endif
@@ -350 +465,0 @@
-
@@ -383,0 +499,3 @@
+    ! DAGMC DEBUGGING
+    ! print '(a80)', 'DAGMC MESHTAL: ifmesh_print'  
+
@@ -761 +879 @@
-
+    integer :: j
@@ -806,0 +925,10 @@
+       ! DAGMC: send comment contents if this is a dagmc mesh
+       if( fm(i)%icrd == 3 ) then
+          call msg_put( fm(i)%n_comment_lines )
+
+          do j=1,fm(i)%n_comment_lines
+             call msg_put( fm(i)%comment(j) )
+          enddo
+       endif
+
+
@@ -822,0 +951 @@
+    integer :: j
@@ -898,0 +1028,13 @@
+       
+       ! DAGMC: receive comment contents if this is a dagmc mesh 
+       if( fm(i)%icrd == 3 ) then
+        call msg_get( fm(i)%n_comment_lines )
+
+        allocate( fm(i)%comment( fm(i)%n_comment_lines ), stat=is )
+        if(is/=0) call erprnt(1,1,0,0,0,0,0,1,' "mesh tally memory allocation failure"')
+
+        do j=1,fm(i)%n_comment_lines
+           call msg_get( fm(i)%comment(j) )
+        enddo
+
+       endif
@@ -939,0 +1082,7 @@
+    ! DAGMC:                                                                                 
+    do i = 1,nmesh
+     if( fm(i)%icrd == 3 ) then
+        call dagmc_setup_mesh_tally( i )
+     endif
+    enddo
+
@@ -951,0 +1101 @@
+    real(dknd), dimension(:), pointer :: dagmc_mpi_data
@@ -962,0 +1113 @@
+       if( fm(i)%icrd /= 3 ) then
@@ -971,0 +1123,8 @@
+       else
+          ! DAGMC            
+            call dagmc_fmesh_get_scratch_data( fm(i)%id, dagmc_mpi_data )
+            call msg_get( dagmc_mpi_data, 1, size(dagmc_mpi_data) )
+            call dagmc_fmesh_add_scratch_to_tally( fm(i)%id )
+            call msg_get( dagmc_mpi_data, 1, size(dagmc_mpi_data) )
+            call dagmc_fmesh_add_scratch_to_error( fm(i)%id )
+       endif
@@ -986,0 +1146 @@
+    real(dknd), dimension(:), pointer :: dagmc_mpi_data
@@ -997,0 +1158 @@
+       if( fm(i)%icrd /= 3 ) then
@@ -1004,0 +1166,9 @@
+
+       else
+          ! DAGMC                    
+            call dagmc_fmesh_get_tally_data( fm(i)%id, dagmc_mpi_data )
+            call msg_put( dagmc_mpi_data, 1, size(dagmc_mpi_data) )
+            call dagmc_fmesh_get_error_data( fm(i)%id, dagmc_mpi_data )
+            call msg_put( dagmc_mpi_data, 1, size(dagmc_mpi_data) )
+
+       endif
@@ -1006,0 +1177,6 @@
+
+    if( enable_dag_tallies ) then
+      ! DAGMC       
+      call dagmc_fmesh_clear_data()
+    endif
+
@@ -1020,0 +1197,5 @@
+   ! DAGMC: perform end of history tasks for all dagmc mesh tallies                          
+    if (enable_dag_tallies) then
+       call dagmc_fmesh_end_history()
+    endif
+
@@ -1066,0 +1248,26 @@
+
+  !-----------------------------------------------------------------------------------------
+
+  subroutine dagmc_get_multiplier( i, erg, multiplier )
+
+    use mcnp_params, only:dknd
+    use mcnp_global, only:rho,icl
+
+    integer   , intent(in) :: i
+    real(dknd), intent(in) :: erg
+    real(dknd), intent(out) :: multiplier
+    real(dknd) :: t
+
+    t = 1._dknd
+    if( fm(i)%ifm_card/=0 ) then
+       call wtmult_fmesh(t,i)
+    endif
+    t = t*fm(i)%fmult
+    if( fm(i)%fmult < 0 ) t = -t*rho(icl)
+
+    multiplier = t
+    if ( fm(i)%icx == 1 ) multiplier = multiplier*erg
+    if ( fm(i)%intrpol /= 0 ) multiplier = multiplier*dosef_fmesh(erg,i)
+
+    return
+  end subroutine dagmc_get_multiplier
diff -rN '--unified=0' mcnp_vendor/Source/src/hstory.F90 mcnp_dagmc/Source/src/hstory.F90
--- mcnp_vendor/Source/src/hstory.F90	2016-01-04 16:06:55.004004899 -0600
+++ mcnp_dagmc/Source/src/hstory.F90	2016-01-04 21:20:51.859745280 -0600
@@ -18,0 +19 @@
+  use dagmc_mod
@@ -82 +83,2 @@
-   if( lca(icl)<0 ) then
+  ! DAGMC: only do this when running in non-CAD mode
+  if( lca(icl)<0 .and. (isdgmc == 0) ) then
@@ -93 +95,2 @@
-  call track(icl)
+  ! DAGMC: only call track here if in normal mode (NOT in CAD mode)
+  if (isdgmc == 0) call track(icl)
@@ -149,0 +153,8 @@
+        ! DAGMC: In CAD mode, call DAGMC before forcing collision
+        if ( isdgmc == 1 ) then
+           if ( lca(icl) < 0 ) call chkcel(icl,3,j)
+           call dagmc_setdis(huge_float)
+           call track(icl)
+           if ( kdb /= 0 ) goto 390
+        endif
+         
@@ -162,0 +174,10 @@
+
+  ! DAGMC: In CAD mode, get particle information
+  if ( isdgmc == 1 ) then
+     if (lca(icl) < 0) call chkcel(icl,3,j)
+     d = min( pmf, dxl, dtc, deb, dw )
+     call dagmc_setdis(d)
+     call track(icl)
+     if ( kdb /= 0 ) goto 390
+  endif
+
diff -rN '--unified=0' mcnp_vendor/Source/src/igeom.F90 mcnp_dagmc/Source/src/igeom.F90
--- mcnp_vendor/Source/src/igeom.F90	2016-01-04 16:06:54.996004899 -0600
+++ mcnp_dagmc/Source/src/igeom.F90	2016-01-04 21:20:51.859745280 -0600
@@ -9,0 +10 @@
+  use dagmc_mod
@@ -72 +73,2 @@
-  call chekcs
+  ! DAGMC: only call this when running in normal (non-CAD) mode
+  if (isdgmc == 0) call chekcs
diff -rN '--unified=0' mcnp_vendor/Source/src/imcn.F90 mcnp_dagmc/Source/src/imcn.F90
--- mcnp_vendor/Source/src/imcn.F90	2016-01-04 16:06:55.000004899 -0600
+++ mcnp_dagmc/Source/src/imcn.F90	2016-01-04 21:20:51.859745280 -0600
@@ -14,0 +15 @@
+  use dagmc_mod
@@ -423,0 +425,5 @@
+
+    ! Initialize DAGMC
+    if (isdgmc == 1) then   ! set DAGMC parameters from idum & rdum
+       call dagmc_set_settings(dagmc_srcmode, dagmc_distlimit, dagmc_usecad, dagmc_tolerance)
+    endif
diff -rN '--unified=0' mcnp_vendor/Source/src/itally.F90 mcnp_dagmc/Source/src/itally.F90
--- mcnp_vendor/Source/src/itally.F90	2016-01-04 16:06:54.996004899 -0600
+++ mcnp_dagmc/Source/src/itally.F90	2016-01-04 21:20:51.859745280 -0600
@@ -19,0 +20 @@
+  use dagmc_mod
@@ -91,0 +93,7 @@
+
+        ! DAGMC: If in CAD mode, skip up until line prior to marker 40
+        if ( isdgmc == 1 ) then
+          itds(li+i) = k
+          goto 40
+        endif
+
diff -rN '--unified=0' mcnp_vendor/Source/src/main.F90 mcnp_dagmc/Source/src/main.F90
--- mcnp_vendor/Source/src/main.F90	2016-01-04 16:06:54.996004899 -0600
+++ mcnp_dagmc/Source/src/main.F90	2016-01-04 21:20:51.859745280 -0600
@@ -55,0 +56 @@
+  use dagmc_mod
@@ -144,0 +146,25 @@
+
+  ! DAGMC: initialize a DAGMC run if specified
+  if (gcad /= ' ') then
+     isdgmc = 1
+     
+     if (mcnp_opt_multp) dagmc_geom_file_mode = DGFM_READ;
+
+  else
+     
+     ! Error checking for user specifying worthless files
+     if(lcad /= ' ') then
+        call expire(0,'main','CAD list file specified &
+             &   without a geometry file.')
+     endif
+     if(fcad /= ' ') then
+        call expire(0,'main','CAD facet file specified &
+             &   without a geometry file.')
+     endif
+     if(ftol /= ' ') then
+        call expire(0,'main','Facet tolerance specified &
+             &   without a geometry file.')
+     endif
+     
+  endif
+  
@@ -180 +206 @@
-    if( isub(i)==' ' .and. msub(i)/='com' )  isub(i)=msub(i)
+    if( isub(i)==' ' .and. msub(i)/='com' .and. msub(i)/='fcad')  isub(i)=msub(i)
@@ -183,0 +210,4 @@
+  if (isdgmc == 1) then
+     call init_dagmc
+  endif 
+
@@ -194,0 +225 @@
+  if (isdgmc == 1) call dagmc_version_heading(iuo)
diff -rN '--unified=0' mcnp_vendor/Source/src/Makefile mcnp_dagmc/Source/src/Makefile
--- mcnp_vendor/Source/src/Makefile	2016-01-04 16:06:54.996004899 -0600
+++ mcnp_dagmc/Source/src/Makefile	2016-01-04 16:05:32.756006032 -0600
@@ -12 +12 @@
-#    DEF_MACH,  DEF_PLOT,  DEF_SMMP,  DEF_DMMP
+#    DEF_MACH,  DEF_PLOT,  DEF_DAGMC, DEF_SMMP,  DEF_DMMP
@@ -15,0 +16 @@
+#    MOAB_DIR
@@ -84 +85 @@
-DEFS    = $(DEF_CODEINFO) $(DEF_MACH) $(DEF_PLOT) $(DEF_SMMP) $(DEF_DMMP) $(DMMP_NAME)
+DEFS    = $(DEF_CODEINFO) $(DEF_MACH) $(DEF_PLOT) $(DEF_DAGMC) $(DEF_SMMP) $(DEF_DMMP) $(DMMP_NAME)
@@ -89 +90 @@
-# Defined in FILE.list:  F_SRC, F_OBJS, C_SRC, C_OBJS
+# Defined in FILE.list:  F_SRC, F_OBJS, C_SRC, C_OBJS, CXX_SRC, CXX_OBJS
@@ -98,2 +99,2 @@
-LIBS	= $(PLOTLIBS)  $(LIB_DMMP) $(EXTRALIBS) 
-INCLUDES= -I.  $(INC_DMMP)  $(INCLUDE_DIRS) 
+LIBS	= $(PLOTLIBS)  $(LIB_DMMP) $(EXTRALIBS) $(DAGMC_LIBS)
+INCLUDES += -I.  $(INC_DMMP)  $(INCLUDE_DIRS) 
@@ -105,0 +107 @@
+  ALL_CXXFLAGS	= $(CPPFLAGS) $(INCLUDES) $(CXXFLAGS)
@@ -111,0 +114 @@
+  ALL_CXXFLAGS	= $(CPPFLAGS) $(INCLUDES) $(CXXFLAGS)
@@ -120 +123 @@
-$(EXEC):   $(F_OBJS) $(C_OBJS) 
+$(EXEC):   $(F_OBJS) $(C_OBJS) $(CXX_OBJS)
@@ -122 +125 @@
-	@ $(LD)  $(OUT)$(EXEC) $(F_OBJS) $(C_OBJS) $(ALL_LDFLAGS)
+	@ $(LD)  $(OUT)$(EXEC) $(F_OBJS) $(C_OBJS) $(CXX_OBJS) $(ALL_LDFLAGS)
@@ -126 +129 @@
-	@ $(RM) -f $(F_OBJS) $(C_OBJS) ./*$(OBJF)
+	@ $(RM) -f $(F_OBJS) $(C_OBJS) $(CXX_OBJS) ./*$(OBJF) ../dagmc/*$(OBJC)
@@ -131 +134 @@
-	@ $(RM) -f $(F_OBJS) $(C_OBJS) ./*$(OBJF)
+	@ $(RM) -f $(F_OBJS) $(C_OBJS) $(CXX_OBJS) ./*$(OBJF) ../dagmc/*$(OBJC)
@@ -146 +149 @@
-.SUFFIXES:      .F90    .c      $(OBJF)		$(OBJC)		$(I)	.a
+.SUFFIXES:      .F90    .c      .cpp	$(OBJF)		$(OBJC)		$(I)	.a
@@ -160,0 +164,7 @@
+
+%$(OBJC) : %.cpp
+	$(ECHO) "--- $@ ---"
+  ifeq (1,$(scr_trace))
+	$(ECHO) "$(CXX) $(ALL_CXXFLAGS) -c -o $@ $<"
+  endif
+	$(CXX) $(ALL_CXXFLAGS) -c -o $@ $<
diff -rN '--unified=0' mcnp_vendor/Source/src/mcnp_input.F90 mcnp_dagmc/Source/src/mcnp_input.F90
--- mcnp_vendor/Source/src/mcnp_input.F90	2016-01-04 16:06:55.004004899 -0600
+++ mcnp_dagmc/Source/src/mcnp_input.F90	2016-01-04 21:20:51.859745280 -0600
@@ -11 +11 @@
-  integer,parameter :: nkcd   = 104     != Number of different types of input cards.
+  integer,parameter :: nkcd   = 107     != Number of different types of input cards.
@@ -123,0 +124,6 @@
+  ! dagmc card keywords, input values
+  character(len=14), parameter :: hdagmc(4) = (/'check_src_cell', &
+    &                                           'usecad        ', &
+    &                                           'distlimit     ', &
+    &                                           'tolerance     ' /)
+
@@ -241,0 +248 @@
+  data cnm(107),(krq(i,104),i=1,7)/ 'dagmc',0,0, 0,0, 0,  12,0 / 
diff -rN '--unified=0' mcnp_vendor/Source/src/mcnp_iofiles.F90 mcnp_dagmc/Source/src/mcnp_iofiles.F90
--- mcnp_vendor/Source/src/mcnp_iofiles.F90	2016-01-04 16:06:55.004004899 -0600
+++ mcnp_dagmc/Source/src/mcnp_iofiles.F90	2016-01-04 21:20:51.859745280 -0600
@@ -37 +37,6 @@
-    &  dumn2   = '        '
+    &  dumn2   = '        ', &
+    &  gcad    = '        ', &  != DAGMC geometry input file (CAD or facets)
+    &  lcad    = '        ', &  != DAGMC input log file
+    &  fcad    = '        ', &  != DAGMC facets output file
+    &  ftol    = '        '     != DAGMC faceting tolerance
+
@@ -48 +53,3 @@
-    &    'meshtal ', 'dumn1   ', 'dumn2   ', ('        ',j=1,14) /)
+    &    'meshtal ', 'dumn1   ', 'dumn2   ', &
+    &    'gcad    ', 'lcad    ', 'fcad    ', 'ftol    ', &
+    &   ('        ',j=1,10) /)
@@ -82,0 +90,4 @@
+    gcad    = isub(19)
+    lcad    = isub(20)
+    fcad    = isub(21)
+    ftol    = isub(22)
diff -rN '--unified=0' mcnp_vendor/Source/src/mcnp_params.F90 mcnp_dagmc/Source/src/mcnp_params.F90
--- mcnp_vendor/Source/src/mcnp_params.F90	2016-01-04 16:06:54.996004899 -0600
+++ mcnp_dagmc/Source/src/mcnp_params.F90	2016-01-04 21:20:51.863745280 -0600
@@ -130,0 +131 @@
+  integer,parameter :: iulc = 57        != I/O unit for DAGMC log file
diff -rN '--unified=0' mcnp_vendor/Source/src/msgcon.F90 mcnp_dagmc/Source/src/msgcon.F90
--- mcnp_vendor/Source/src/msgcon.F90	2016-01-04 16:06:55.004004899 -0600
+++ mcnp_dagmc/Source/src/msgcon.F90	2016-01-04 21:20:51.863745280 -0600
@@ -18,0 +19 @@
+  use dagmc_mod
@@ -158,0 +160,5 @@
+
+  write(jtty,*) "master sending DAGMC information...."
+  call dm_sndi
+  call dagmc_msgput
+  call dm_send(-1,20,i)
diff -rN '--unified=0' mcnp_vendor/Source/src/msgtsk.F90 mcnp_dagmc/Source/src/msgtsk.F90
--- mcnp_vendor/Source/src/msgtsk.F90	2016-01-04 16:06:54.996004899 -0600
+++ mcnp_dagmc/Source/src/msgtsk.F90	2016-01-04 21:20:51.863745280 -0600
@@ -17,0 +18 @@
+  use dagmc_mod
@@ -81,0 +83,3 @@
+
+  call dm_recv(-1,20,i)
+  call dagmc_msgget  
diff -rN '--unified=0' mcnp_vendor/Source/src/namchg.F90 mcnp_dagmc/Source/src/namchg.F90
--- mcnp_vendor/Source/src/namchg.F90	2016-01-04 16:06:55.004004899 -0600
+++ mcnp_dagmc/Source/src/namchg.F90	2016-01-04 21:20:51.863745280 -0600
@@ -8,0 +9 @@
+  use dagmc_mod
@@ -12 +13,4 @@
-  if( mm==2 ) then
+  ! DAGMC: Need to change some of these conditionals, no bounding
+  !        surfaces exist in CAD mode, handle as regular surface
+
+  if( ( mm==2 ) .or. ( ( mm == 3) .and. ( isdgmc == 1 ) ) ) then
@@ -17 +21 @@
-  elseif( mm==3 ) then
+  elseif( ( mm==3 ) .and. ( isdgmc == 0 ) ) then
diff -rN '--unified=0' mcnp_vendor/Source/src/newcel.F90 mcnp_dagmc/Source/src/newcel.F90
--- mcnp_vendor/Source/src/newcel.F90	2016-01-04 16:06:55.000004899 -0600
+++ mcnp_dagmc/Source/src/newcel.F90	2016-01-04 21:20:51.863745280 -0600
@@ -10,0 +11 @@
+  use dagmc_mod
@@ -12,0 +14,7 @@
+  ! DAGMC: In CAD mode, call MOAB version of this
+  if ( isdgmc == 1 ) then
+    if ( cs /= 0 ) cs = angl()
+    call dagmcnewcel(jsu,icl,iap)
+    if ( mxa == -1 ) kdb = 1
+  endif
+
@@ -36 +44,4 @@
-    call expirx(1,'newcel','the surface crossed is not a surface of this cell.')
+    ! DAGMC: Only check this if running normally, (NOT in CAD mode)
+    if (isdgmc == 0) then
+      call expirx(1,'newcel','the surface crossed is not a surface of this cell.')
+    endif
diff -rN '--unified=0' mcnp_vendor/Source/src/nextit.F90 mcnp_dagmc/Source/src/nextit.F90
--- mcnp_vendor/Source/src/nextit.F90	2016-01-04 16:06:54.996004899 -0600
+++ mcnp_dagmc/Source/src/nextit.F90	2016-01-04 21:20:51.863745280 -0600
@@ -12,0 +13 @@
+  use dagmc_mod
@@ -1569 +1570,22 @@
- 
+
+  case( 107 )
+    !  >>>>>  DAGMC parameters                                          dagmc
+    !  Modeled after RAND (99)
+    ! m1c=index of current dagmc keyword.
+    if( m1c == 0 ) then
+      if( index(',=',hitm(1:1))==0 ) then
+        do m1c = 1,4
+          if( hitm(1:14)==hdagmc(m1c) )  return
+        enddo
+        m1c = 0
+      endif
+    else
+      if( index(',=',hitm(1:1))==0 ) then
+        if( m1c==1 .and. ( hitm(1:2) == 'of' .or. hitm(1:2) == 'no') )  dagmc_srcmode = 1 
+        if( m1c==2 .and. ( hitm(1:2) == 'on' .or. hitm(1:2) == 'ye') )  dagmc_usecad = 1
+        if( m1c==3 .and. ( hitm(1:2) == 'on' .or. hitm(1:2) == 'ye') )  dagmc_distlimit = 1
+        if( m1c==4 )  dagmc_tolerance = ritm
+        m1c = 0
+      endif
+    endif
+
diff -rN '--unified=0' mcnp_vendor/Source/src/oldcrd.F90 mcnp_dagmc/Source/src/oldcrd.F90
--- mcnp_vendor/Source/src/oldcrd.F90	2016-01-04 16:06:55.008004899 -0600
+++ mcnp_dagmc/Source/src/oldcrd.F90	2016-01-04 21:20:51.863745280 -0600
@@ -11,0 +12 @@
+  use dagmc_mod
@@ -37 +38,2 @@
-      if( lca(mxa)==nlja+1 ) &
+      ! DAGMC: In DAGMC mode, cells should have no surfaces
+      if( ( lca(mxa)==nlja+1 ) .and. ( isdgmc == 0)  ) &
@@ -48,0 +51,4 @@
+
+    ! DAGMC: Break out of subroutine here in CAD mode
+    if ( isdgmc == 1 ) return
+
diff -rN '--unified=0' mcnp_vendor/Source/src/pass1.F90 mcnp_dagmc/Source/src/pass1.F90
--- mcnp_vendor/Source/src/pass1.F90	2016-01-04 16:06:55.004004899 -0600
+++ mcnp_dagmc/Source/src/pass1.F90	2016-01-04 21:20:51.863745280 -0600
@@ -13,0 +14 @@
+  use dagmc_mod
@@ -15,0 +17,3 @@
+
+  ! DAGMC: For CAD mode, read cell/surface cards from log file
+  if ( isdgmc == 1) call lcadrd
diff -rN '--unified=0' mcnp_vendor/Source/src/sourcb.F90 mcnp_dagmc/Source/src/sourcb.F90
--- mcnp_vendor/Source/src/sourcb.F90	2016-01-04 16:06:54.996004899 -0600
+++ mcnp_dagmc/Source/src/sourcb.F90	2016-01-04 21:20:51.867745280 -0600
@@ -8,0 +9 @@
+  use dagmc_mod
@@ -14 +15 @@
-  
+ 
@@ -471,0 +473,6 @@
+
+  ! DAGMC: In CAD mode, read DAGMC setting for treatment of source cell
+  if ( isdgmc == 1 .and. dagmc_srcmode==1 ) then
+     return
+  endif
+
diff -rN '--unified=0' mcnp_vendor/Source/src/tally.F90 mcnp_dagmc/Source/src/tally.F90
--- mcnp_vendor/Source/src/tally.F90	2016-01-04 16:06:55.004004899 -0600
+++ mcnp_dagmc/Source/src/tally.F90	2016-01-04 21:20:51.871745280 -0600
@@ -10,0 +11 @@
+  use dagmc_mod
@@ -287,0 +289,4 @@
+
+    ! DAGMC: If in CAD mode, make sure distance to physics collision is initialized
+    if ( isdgmc == 1 ) call dagmc_setdis(huge_float)
+
diff -rN '--unified=0' mcnp_vendor/Source/src/track.F90 mcnp_dagmc/Source/src/track.F90
--- mcnp_vendor/Source/src/track.F90	2016-01-04 16:06:55.004004899 -0600
+++ mcnp_dagmc/Source/src/track.F90	2016-01-04 21:20:51.871745280 -0600
@@ -14,0 +15 @@
+  use dagmc_mod
@@ -25,0 +27,9 @@
+
+  ! DAGMC: If in CAD mode, call DAGMC version of track instead
+  if ( isdgmc == 1 ) then    
+    call dagmctrack(ih,uuu,vvv,www,xxx,yyy,zzz,huge_float,dls, &
+     &               jap,jsu,nps)
+    if ( dls == huge_float ) kdb = 2
+    return
+  endif
+
diff -rN '--unified=0' mcnp_vendor/Source/src/transm.F90 mcnp_dagmc/Source/src/transm.F90
--- mcnp_vendor/Source/src/transm.F90	2016-01-04 16:06:55.004004899 -0600
+++ mcnp_dagmc/Source/src/transm.F90	2016-01-04 21:20:51.871745280 -0600
@@ -10,0 +11 @@
+  use dagmc_mod
@@ -32,0 +34,2 @@
+    ! DAGMC: If in CAD mode, call setdis first
+    if ( isdgmc == 1 ) call dagmc_setdis( dd - sd )
diff -rN '--unified=0' mcnp_vendor/Source/src/volume.F90 mcnp_dagmc/Source/src/volume.F90
--- mcnp_vendor/Source/src/volume.F90	2016-01-04 16:06:55.000004899 -0600
+++ mcnp_dagmc/Source/src/volume.F90	2016-01-04 21:20:51.871745280 -0600
@@ -11,0 +12 @@
+  use dagmc_mod
@@ -15,0 +17,6 @@
+  ! DAGMC: In CAD mode, circumvent most of this function and call DAGMC version
+  if (isdgmc == 1) then
+    call dagmcvolume(mxa,vols,mxj,aras)
+    goto 260
+  endif
+
